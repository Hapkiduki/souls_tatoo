
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get BTData => "My data";
  String get BTDesign => "My designs";
  String get BTFavorites => "My favourites";
  String get Email => "Email";
  String get ForgotPass => "Forgot Password?";
  String get Home => "Home";
  String get Login => "Login";
  String get LoginWith => "Login with";
  String get Logout => "Logout";
  String get MyProfile => "My Profile";
  String get Password => "Password";
  String get Register => "Sign In";
  String get Rememberme => "Remember me";
  String parameter(String name) => "About $name";
}

class ru extends S {
  const ru();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get Email => "электронная почта";
  @override
  String get BTData => "Моя информация";
  @override
  String get Login => "Авторизоваться";
  @override
  String get ForgotPass => "Забыли пароль?";
  @override
  String get Register => "войти в систему";
  @override
  String get Rememberme => "Запомни меня";
  @override
  String get LoginWith => "Войдите с";
  @override
  String get Logout => "Выйти";
  @override
  String get MyProfile => "Мой профиль";
  @override
  String get BTDesign => "Мои проекты";
  @override
  String get Home => "инициирование";
  @override
  String get BTFavorites => "Мои избранные";
  @override
  String get Password => "пароль";
  @override
  String parameter(String name) => "About $name";
}

class ko extends S {
  const ko();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get Email => "이메일";
  @override
  String get BTData => "내 정보";
  @override
  String get Login => "로그인";
  @override
  String get ForgotPass => "분실 암호?";
  @override
  String get Register => "로그인";
  @override
  String get Rememberme => "날 기억해";
  @override
  String get LoginWith => "로 로그인";
  @override
  String get Logout => "로그 아웃";
  @override
  String get MyProfile => "내 프로필";
  @override
  String get BTDesign => "내 디자인";
  @override
  String get Home => "홈";
  @override
  String get BTFavorites => "내 즐겨 찾기";
  @override
  String get Password => "암호";
  @override
  String parameter(String name) => "About $name";
}

class pt extends S {
  const pt();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get Email => "O email";
  @override
  String get BTData => "Meus dados";
  @override
  String get Login => "Entrar";
  @override
  String get ForgotPass => "Esqueceu a senha?";
  @override
  String get Register => "Assinar em";
  @override
  String get Rememberme => "Lembre de mim";
  @override
  String get LoginWith => "Login com";
  @override
  String get Logout => "Sair";
  @override
  String get MyProfile => "Meu perfil";
  @override
  String get BTDesign => "Meus projetos";
  @override
  String get Home => "Home";
  @override
  String get BTFavorites => "Meus favoritos";
  @override
  String get Password => "Senha";
  @override
  String parameter(String name) => "About $name";
}

class ja extends S {
  const ja();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get Email => "Eメール";
  @override
  String get BTData => "私の情報";
  @override
  String get Login => "ログイン";
  @override
  String get ForgotPass => "忘れた パスワード か？";
  @override
  String get Register => "サインイン";
  @override
  String get Rememberme => "忘れない";
  @override
  String get LoginWith => "でログイン";
  @override
  String get Logout => "ログアウト";
  @override
  String get MyProfile => "私のプロフィール";
  @override
  String get BTDesign => "私のデザイン";
  @override
  String get Home => "ホーム";
  @override
  String get BTFavorites => "私のお気に入り";
  @override
  String get Password => "パスワード";
  @override
  String parameter(String name) => "About $name";
}

class en extends S {
  const en();
}

class es extends S {
  const es();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get Email => "Correo Electrónico";
  @override
  String get BTData => "Mis Datos";
  @override
  String get Login => "INICIAR SESIÓN";
  @override
  String get ForgotPass => "¿Recuperar contraseña?";
  @override
  String get Register => "Registrarse";
  @override
  String get Rememberme => "Recordarme";
  @override
  String get LoginWith => "Iniciar sesión con";
  @override
  String get Logout => "Cerrar sesión";
  @override
  String get MyProfile => "Mi Perfil";
  @override
  String get BTDesign => "Mis Diseños";
  @override
  String get Home => "Inicio";
  @override
  String get BTFavorites => "Mis Favoritos";
  @override
  String get Password => "Contraseña";
  @override
  String parameter(String name) => "About $name";
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("ru", ""),
      const Locale("ko", ""),
      const Locale("pt", ""),
      const Locale("ja", ""),
      const Locale("es", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "ru":
        return new SynchronousFuture<WidgetsLocalizations>(const ru());
      case "ko":
        return new SynchronousFuture<WidgetsLocalizations>(const ko());
      case "pt":
        return new SynchronousFuture<WidgetsLocalizations>(const pt());
      case "ja":
        return new SynchronousFuture<WidgetsLocalizations>(const ja());
      case "es":
        return new SynchronousFuture<WidgetsLocalizations>(const es());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
